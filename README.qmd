---
format: gfm
---

<!-- README.md is generated from README.Qmd. Please edit that file -->

# fixes <a><img src="man/figures/logo.png" align="right" height="138" /></a>

<!-- badges: start -->
[![R-CMD-check](https://github.com/yo5uke/fixes/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/yo5uke/fixes/actions/workflows/R-CMD-check.yaml)
<!-- badges: end -->

## Overview

The `fixes` package is designed for conducting analysis and creating plots for event studies, a method used to verify the parallel trends assumption in two-way fixed effects (TWFE) difference-in-differences (DID) analysis.

The package includes two main functions:

1. `run_es()`: Accepts a data frame, generates lead and lag variables, and performs event study analysis. The function returns the results as a data frame.
2. `plot_es()`: Creates plots using `ggplot2` based on the data frame generated by `run_es()`. Users can choose between a plot with `geom_ribbon()` or `geom_errorbar()` to visualize the results.

## Installation

You can install the package like this:

```{.r}
# install.packages("pak")
pak::pak("yo5uke/fixes")
```

or

```{.r}
# install.packages("devtools")
devtools::install_github("yo5uke/fixes")
```

The `fixes` package is not currently available on CRAN. Please install it from the GitHub repository.

## How to use

First, load the library.

```{r}
library(fixes)
```

### Data frame

The data frame to be analyzed must include the following variables:

1. A variable to identify individuals.
1. A dummy variable indicating treated individuals (e.g., `is_treated`).
1. A variable representing time (e.g., `year`).
1. An outcome variable.

For example, a data frame like the following:

```{r}
#| echo: false

set.seed(2)

n_firms <- 1000
n_states <- 50
T <- 36

firm_id <- 1:n_firms
state_id <- sample(n_states, size = n_firms, replace = TRUE)
year <- 1980:2015

fe_firm <- rnorm(n_firms, mean = 0, sd = .5)
fe_year <- rnorm(T, mean = 0, sd = .5)
error <- rnorm(n_firms * T, mean = 0, sd = .5)

# Not Staggered
treated_1998 <- sample(c(1, 0), size = n_firms, 
                       replace = TRUE, prob = c(1/2, 1/2))

df <- tibble::tibble(
  firm_id = rep(firm_id, each = T), 
  state_id = rep(state_id, each = T), 
  year = rep(year, times = n_firms), 
  fe_firm = rep(fe_firm, each = T), 
  fe_year = rep(fe_year, times = n_firms), 
  error = error, 
  is_treated = rep(treated_1998, each = T), 
  after_treat = dplyr::if_else(is_treated == 1 & year >= 1998, 1, 0), 
  y = dplyr::case_when(
    after_treat == 1 ~ 
      rnorm(n_firms * T, mean = .3, sd = .2) * (year - 1997) + fe_firm + fe_year + error, 
    .default = fe_firm + fe_year + error
  )
)

df |> 
  dplyr::select(firm_id, state_id, year, is_treated, y) |> 
  head() |> 
  knitr::kable()
```

### `run_es()`

`run_es()` has nine arguments.

| Arguments   | Description                                                                                               |
|-------------|-----------------------------------------------------------------------------------------------------------|
| data        | Data frame to be used                                                                                     |
| outcome_var | Outcome variable                                                                                          |
| treated_var | Dummy variable indicating the individual being treated                                                    |
| time_var    | Variable that represents time                                                                             |
| timing      | Variable indicating treatment timing                                                                      |
| lead_range  | Range of time before treatment                                                                            |
| lag_range   | Range of time aftere treatment                                                                            |
| fe_var      | Variable representing fixed effects                                                                       |
| cluster_var | A variable that specifies how to cluster the standard error (if clustering is requested)                  |
| baseline    | A number indicating the relative year to be dropped when performing a regression                          |
| interval    | Parameter to specify the time step between observations (e.g., 1 for yearly data, 5 for 5-year intervals) |

Then, perform the analysis as follows:

```{r}
event_study <- run_es(
  data        = df, 
  outcome_var = y, 
  treated_var = is_treated, 
  time_var    = year, 
  timing      = 1998, 
  lead_range  = 5, 
  lag_range   = 5, 
  fe_var      = c("firm_id", "year"), 
  cluster_var = "state_id"
)
```

***Note:*** Please enclose `fe_var` and `cluster_var` in double quotation marks.

By executing `run_es()`, the event study analysis results will be returned as a tidy data frame.

You can use this data to create your own plots, but `fixes` also has convenient plotting functions.

### `plot_es()`

The `plot_es()` function creates a plot based on `ggplot2`. 

`plot_es()` has 12 arguments.

| Arguments   | Description                                                                     |
|-------------|---------------------------------------------------------------------------------|
| data        | Data frame created by `run_es()`                                                |
| type        | The type of confidence interval visualization: "ribbon" (default) or "errorbar" |
| vline_val   | The x-intercept for the vertical reference line (default: 0)                    |
| vline_color | Color for the vertical reference line (default: "#000")                         |
| hline_val   | The y-intercept for the horizontal reference line (default: 0)                  |
| hline_color | Color for the horizontal reference line (default: "#000")                       |
| linewidth   | The width of the lines for the plot (default: 1)                                |
| pointsize   | The size of the points for the estimates (default: 2)                           |
| alpha       | The transparency level for ribbons (default: 0.2)                               |
| barwidth    | The width of the error bars (default: 0.2)                                      |
| color       | The color for the lines and points (default: "#B25D91FF")                       |
| fill        | The fill color for ribbons (default: "#B25D91FF").                              |

If you don't care about the details, you can just pass the data frame created with `run_es()` and the plot will be complete.

```{r}
plot_es(event_study)
```

```{r}
plot_es(event_study, type = "errorbar")
```

```{r}
plot_es(event_study, type = "errorbar", vline_val = -1)
```

Since it is created on a `ggplot2` basis, it is possible to modify minor details.

```{r}
plot_es(event_study, type = "errorbar", vline_val = -1) + 
  ggplot2::scale_x_continuous(breaks = seq(-5, 5, by = 1)) + 
  ggplot2::ggtitle("Result of Event Study")
```

## Debugging

If you find an issue, please report it on the GitHub Issues page.

